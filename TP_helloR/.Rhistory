v = c(1,0,9,2,4,6,1,0,1);
order(v)
sort(v);
v
v = sort(v);
a = c()
a; dim(a) = 10
vector(a); dim(a) = 10
vector(a)
a = c(); dim(a) = 10
a = c(NA); dim(a) = 10
a = c(NA)
a
dim(a) = 50
a = c()
class(a)
a = c(NA, NA)
class(a)
dim(a) = 4
a[1:10]
a[1:10]
a
a = c(1, 2, 43, 10); dim(a) = 5
a = array()
dim(a) = 5
class(a)
a = array(c(1,2,3,4))
a
dim(a)
dim(a) = 5
a = array(1:10)
a
a = array(1:10, 10:1)
a
a = array(1:2, 2:1)
a
a = array(1:2)
a
a = array(1:2, 2:1); dim(a) = 2:2
a
a = array(1:2, 2:1); dim(a) = c(2,2)
a
a = array(c(1:10,10:1))
a
a = array(c(1:10,10:1))
dim(a) = c(2,10)
a
dim(a) = c(10,2)
a
Z = array(1:25, dim=c(5,5))
Z
Z[a]
Z = array(1:100, dim=c(10,10))
Z[a]
a
View(Z)
diag(Z)
diag(8)
diag(c(1,2,3,4))
M = array(0, dim=c(10,10)); diag(M) = 1
M
M = array(0, dim=c(10,10)); diag(M) = 10
M
df = data.frame('pri' = 1:5, 'seg' = letters[1:5])
df
= data.frame('pri' = c(1:5), 'seg' = letters[1:5])
df
1:5, 'seg' = letters[1:5])
df
df = data.frame('pri' = c(1:5), 'seg' = letters[1:5])
df
df = data.frame('pri' = 1:5, 'seg' = letters[1:5])
df
df$loco = c(1:2)
df$loco = c(1:5)
df
df$loco = 1:5
df
J = matrix()
J = matrix(); dim(J)
J = matrix(); dim(J) <- c(5,5)
J = matrix(NA, 5, 5)
View(J)
length(J)
cols(J)
col(J)
cols(J)
dim(J)
for (i: 1:dim(J)[1]) {
for (j: 1:dim(J)[2]) {
}
}
J = matrix(NA, 5, 5)
for (i: 1:dim(J)[1]) {
for (j: 1:dim(J)[2]) {
}
}
J = matrix(NA, 5, 5)
for (i: 1:dim(J)[1]) {
for (j: 1:dim(J)[2]) {
}
}
dim(J)[1]
1:dim(J)[1]
for (i: 1:dim(J)[1]) {
for (j: 1:dim(J)[2]) {
skip
}
}
for (i in 1:dim(J)[1]) {
for (j in 1:dim(J)[2]) {
skip
}
}
J[i][j] = length(intersection(nombres_unicos[[1]], nombres_unicos[[2]])) / length(union(nombres_unicos[[1]], nombres_unicos[[2]]))
J = matrix(NA, 5, 5)
for (i in 1:dim(J)[1]) {
for (j in 1:dim(J)[2]) {
J[i][j] = length(intersection(nombres_unicos[[1]], nombres_unicos[[2]])) / length(union(nombres_unicos[[1]], nombres_unicos[[2]]))
}
}
J[i][j] = length(intersection(unicos_anio[[1]], unicos_anio[[2]])) / length(union(unicos_anio[[1]], unicos_anio[[2]]))
J = matrix(NA, 5, 5)
for (i in 1:dim(J)[1]) {
for (j in 1:dim(J)[2]) {
J[i][j] = length(intersection(unicos_anio[[1]], unicos_anio[[2]])) / length(union(unicos_anio[[1]], unicos_anio[[2]]))
}
}
unicos_anio[[2]]
df = read.csv('nombres-2000-2004.csv')
head(df)
df$nombre = tolower(df$nombre)
nombres_unicos = unique(df$nombre)
length(nombres_unicos)
unicos_anio = tapply(df$nombre, df$anio, unique)
J = matrix(NA, 5, 5)
for (i in 1:dim(J)[1]) {
for (j in 1:dim(J)[2]) {
J[i][j] = length(intersection(unicos_anio[[1]], unicos_anio[[2]])) / length(union(unicos_anio[[1]], unicos_anio[[2]]))
}
}
unicos_anio[[2]]
ybucis)abui
unicos_anio
df = read.csv('nombres-2000-2004.csv')
head(df)
df$nombre = tolower(df$nombre)
nombres_unicos = unique(df$nombre)
length(nombres_unicos)
unicos_anio = tapply(df$nombre, df$anio, unique)
J = matrix(NA, 5, 5)
for (i in 1:dim(J)[1]) {
for (j in 1:dim(J)[2]) {
J[i][j] = length(intersection(unicos_anio[[1]], unicos_anio[[2]])) / length(union(unicos_anio[[1]], unicos_anio[[2]]))
}
}
setwd("~/code/LaboDatos/TP_helloR")
df = read.csv('nombres-2000-2004.csv')
head(df)
df$nombre = tolower(df$nombre)
nombres_unicos = unique(df$nombre)
length(nombres_unicos)
unicos_anio = tapply(df$nombre, df$anio, unique)
J = matrix(NA, 5, 5)
for (i in 1:dim(J)[1]) {
for (j in 1:dim(J)[2]) {
J[i][j] = length(intersection(unicos_anio[[1]], unicos_anio[[2]])) / length(union(unicos_anio[[1]], unicos_anio[[2]]))
}
}
unicos_anio[[1]]
intersection()
?intersection
df = read.csv('nombres-2000-2004.csv')
head(df)
df$nombre = tolower(df$nombre)
nombres_unicos = unique(df$nombre)
length(nombres_unicos)
unicos_anio = tapply(df$nombre, df$anio, unique)
J = matrix(NA, 5, 5)
for (i in 1:dim(J)[1]) {
for (j in 1:dim(J)[2]) {
J[i][j] = length(intersect(unicos_anio[[1]], unicos_anio[[2]])) / length(union(unicos_anio[[1]], unicos_anio[[2]]))
}
}
warnings()
df = read.csv('nombres-2000-2004.csv')
head(df)
df$nombre = tolower(df$nombre)
nombres_unicos = unique(df$nombre)
length(nombres_unicos)
unicos_anio = tapply(df$nombre, df$anio, unique)
J = matrix(NA, 5, 5)
for (i in 1:dim(J)[1]) {
for (j in 1:dim(J)[2]) {
J[i, j] = length(intersect(unicos_anio[[i]], unicos_anio[[j]])) / length(union(unicos_anio[[i]], unicos_anio[[j]]))
}
}
View(J)
J = outer(unicos_anio, unicos_anio, function(x, y) length(x) / length(y))
J = outer(unicos_anio, unicos_anio, function(x, y) cat(x))
J = outer(unicos_anio, unicos_anio, function(x, y) print(x))
J = outer(unicos_anio, unicos_anio, function(x, y) print(class(x))
J = outer(unicos_anio, unicos_anio, function(x, y) print(class(x)))
J = outer(unicos_anio, unicos_anio, function(x, y) print(class(x)))
J = outer(unicos_anio, unicos_anio, function(x, y) print(length(x))
)
J = outer(unicos_anio, unicos_anio, function(x, y) print(length(x)))
length(unicos_anio[[1]])
length(unicos_anio[1])
J = outer(1:5, 1:5, function(x, y) print(length(unicos_anio[[x]])))
J = outer(1:5, 1:5, function(x, y) print(length(unicos_anio[x])))
unicos_anio[1]
length(unicos_anio[1])
J = outer(1:5, 1:5, function(x, y) print(x))
J = outer(1:5, 1:5, function(x, y) print(x, y))
J = outer(1:5, 1:5, function(x, y) print(x, y))
J = outer(1:5, 1:5, function(x, y) print(c(x, y))
)
J = outer(1:5, 1:5, function(x, y) print(c(x, y)))
J = outer(unicos_anio, unicos_anio, function(x, y) print(c(head(x), head(y))))
J = outer(unicos_anio, unicos_anio, function(x, y) print(head(c(head(x), head(y)))))
